public class WeiYunSuan{
	public static void main(String[] args) {
		int a = 3;// 00000000 00000000 0000000 00000011 原码
			      // 00000000 00000000 0000000 00000011	反码
		          // 00000000 00000000 0000000 00000011 补码
		//可得只对于正数的原码 ，反码 ， 补码 都是一样的
		int b = -3;   // 10000000 00000000 0000000 00000011 原码
		  			 // 11111111 1111111  11111100  反码 //零变1 1变零
		  			 // 11111111 1111111  11111101  补码 //负数的补码是反码加
		//位运算的都是基于在补码的基础上的 
		//例子 ：
		//  2 - 3  = ?             
		// 2的原码  00000000 0000000 0000000 0000010  
		// 2的反码  00000000 0000000 0000000 0000010 
		// 2的补码  00000000 0000000 0000000 0000010                        

		//-3的原码  00000000 0000000 0000000 0000011 
		//-3的反码  11111111 1111111 1111111 1111100 
		//-3的补码  11111111 1111111 1111111 1111101

		//运算      00000000 0000000 0000000 0000010
	    //运算      11111111 1111111 1111111 1111101
	    //运算      --------------------------------
	    //运算      11111111 1111111 1111111 1111111 （符号位不参与运算 并且此时得到的结果是答案的补码 ，我们要的到其的原码）
	    //反码      11111111 1111111 1111111 1111110
	    //原码      10000000 0000000 0000000 0000001   （得出是-1）
        
        //00000000 0000000 0000000 0000010 (2)
        //11111111 1111111 1111111 1111101 (-3)
        // ^ 两个不同则为1 ，否则为 0
        //11111111 1111111 1111111 1111111（补码）
        //11111111 1111111 1111111 1111110 (反码)
        //10000000 0000000 0000000 0000001 (原码) -1

        System.out.println(2^-3);//-1
        //00000000 0000000 0000000 0000010 (2)
        //11111111 1111111 1111111 1111101 (-3)
        //& 是两个都是1 的才是1 
        //00000000 0000000 0000000 0000000  (0)
        //
        System.out.println(2&-3);//0
        //00000000 0000000 0000000 0000010 (2)
        //11111111 1111111 1111111 1111101 (-3)
        // | 只要有1 个是1 则就是1
        //11111111 1111111 1111111 1111111 补码
        //11111111 1111111 1111111 1111110 反码
        //10000000 0000000  0000000 0000001 原码 -1
        System.out.println(2 | -3);//-1
        //00000000 0000000 0000000 0000010 (2)
        //取反 将 1变成 0  0 变成1
        //11111111 1111111 1111111 1111101(补码)
        //11111111 1111111 1111111 1111100(反码)
        //10000000 0000000 0000000 0000011(原码) -3
        System.out.println(~2);//-3
	}
}